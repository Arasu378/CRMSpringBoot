package com.kyrostechnologies.crm.application.organization.datatier;

import com.kyrostechnologies.crm.dbconstants.OrganizationDBConstants;
import com.kyrostechnologies.crm.model.OrganizationModel;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;

public class OrganizationDataTier implements RowMapper<OrganizationModel> {
    @Override
    public OrganizationModel mapRow(ResultSet rs, int i) throws SQLException {
        OrganizationModel model=new OrganizationModel();
        int organizationId=rs.getInt(OrganizationDBConstants.ORGANIZATION_ID);
        model.setOrganizationId(organizationId);
        String name=rs.getString(OrganizationDBConstants.NAME);
        model.setName(name);
        int peopleCount=rs.getInt(OrganizationDBConstants.PEOPLE_COUNT);
        model.setPeopleCount(peopleCount);
        int ownersUserProfileId=rs.getInt(OrganizationDBConstants.OWNER_USER_PROFILE_ID);
        model.setOwnersUserProfileId(ownersUserProfileId);
        String address=rs.getString(OrganizationDBConstants.ADDRESS);
        model.setAddress(address);
        String cCEmail=rs.getString(OrganizationDBConstants.CC_EMAIL);
        model.setCCEmail(cCEmail);
        String createdDate=rs.getString(OrganizationDBConstants.CREATED_DATE);
        model.setCreatedDate(createdDate);
        String modifiedDate=rs.getString(OrganizationDBConstants.MODIFIED_DATE);
        model.setModifiedDate(modifiedDate);
        String companyCode=rs.getString(OrganizationDBConstants.COMPANY_CODE);
        model.setCompanyCode(companyCode);
        int openDealsCount=rs.getInt(OrganizationDBConstants.OPEN_DEALS_COUNT);
        model.setOpenDealsCount(openDealsCount);
        int relatedOpenDealsCount=rs.getInt(OrganizationDBConstants.RELATED_OPEN_DEALS_COUNT);
        model.setRelatedOpenDealsCount(relatedOpenDealsCount);
        int closedDealsCount=rs.getInt(OrganizationDBConstants.CLOSED_DEALS_COUNT);
        model.setClosedDealsCount(closedDealsCount);
        int relatedClosedDealsCount=rs.getInt(OrganizationDBConstants.RELATED_CLOSED_DEALS_COUNT);
        model.setRelatedClosedDealsCount(relatedClosedDealsCount);
        int emailMessagesCount=rs.getInt(OrganizationDBConstants.EMAIL_MESSAGES_COUNT);
        model.setEmailMessagesCount(emailMessagesCount);
        int activitiesCount=rs.getInt(OrganizationDBConstants.ACTIVITIES_COUNT);
        model.setActivitiesCount(activitiesCount);
        int doneActivitiesCount=rs.getInt(OrganizationDBConstants.DONE_ACTIVITIES_COUNT);
        model.setDoneActivitiesCount(doneActivitiesCount);
        int undoneActivitiesCount=rs.getInt(OrganizationDBConstants.UNDONE_ACTIVITIES_COUNT);
        model.setUndoneActivitiesCount(undoneActivitiesCount);
        int referenceActivitiesCount=rs.getInt(OrganizationDBConstants.REFERENCE_ACTIVITIES_COUNT);
        model.setReferenceActivitiesCount(referenceActivitiesCount);
        int filesCount=rs.getInt(OrganizationDBConstants.FILES_COUNT);
        model.setFilesCount(filesCount);
        int notesCount=rs.getInt(OrganizationDBConstants.NOTES_COUNT);
        model.setNotesCount(notesCount);
        int followersCount=rs.getInt(OrganizationDBConstants.FOLLOWERS_COUNT);
        model.setFollowersCount(followersCount);
        int wonDealsCount=rs.getInt(OrganizationDBConstants.WON_DEALS_COUNT);
        model.setWonDealsCount(wonDealsCount);
        int relatedWonDealsCount=rs.getInt(OrganizationDBConstants.RELATED_WON_DEALS_COUNT);
        model.setRelatedwonDealsCount(relatedWonDealsCount);
        int lostDealsCount=rs.getInt(OrganizationDBConstants.LOST_DEALS_COUNT);
        model.setLostDealsCount(lostDealsCount);
        int relatedLostDealsCount=rs.getInt(OrganizationDBConstants.RELATED_LOST_DEALS_COUNT);
        model.setRelatedLostDealsCount(relatedLostDealsCount);
        boolean activeFlag=rs.getBoolean(OrganizationDBConstants.ACTIVE_FLAG);
        model.setActiveFlag(activeFlag);
        int categoryId=rs.getInt(OrganizationDBConstants.CATEGORY_ID);
        model.setCategoryId(categoryId);
        int pictureId=rs.getInt(OrganizationDBConstants.PICTURE_ID);
        model.setPictureId(pictureId);
        String countryCode=rs.getString(OrganizationDBConstants.COUNTRY_CODE);
        model.setCountryCode(countryCode);
        String firstChar=rs.getString(OrganizationDBConstants.FIRST_CHAR);
        model.setFirstChar(firstChar);
        int visibleTo=rs.getInt(OrganizationDBConstants.VISIBLE_TO);
        model.setVisibleTo(visibleTo);
        String nextActivityDate=rs.getString(OrganizationDBConstants.NEXT_ACTIVITY_DATE);
        model.setNextActivityDate(nextActivityDate);
        String nextActivityTime=rs.getString(OrganizationDBConstants.NEXT_ACTIVITY_TIME);
        model.setNextActivityTime(nextActivityTime);
        int nextActivityId=rs.getInt(OrganizationDBConstants.NEXT_ACTIVITY_ID);
        model.setNextActivityId(nextActivityId);
        int lastActivityId=rs.getInt(OrganizationDBConstants.LAST_ACTIVITY_ID);
        model.setLastActivityId(lastActivityId);
        String lastActivityDate=rs.getString(OrganizationDBConstants.LAST_ACTIVITY_DATE);
        model.setLastActivityDate(lastActivityDate);
        String timeLineLastActivityTime=rs.getString(OrganizationDBConstants.TIME_LINE_LAST_ACTIVITY_TIME);
        model.setTimeLineLastActivityTime(timeLineLastActivityTime);
        String timeLineLastActivityTimeByOwner=rs.getString(OrganizationDBConstants.TIME_LINE_LAST_ACTIVITY_TIME_BY_OWNER);
        model.setTimeLineLastActivityTimeByOwner(timeLineLastActivityTimeByOwner);
        String addressSubpremise=rs.getString(OrganizationDBConstants.ADDRESS_SUBPREMISE);
        model.setAddressSubpremise(addressSubpremise);
        String addressStreetNumber=rs.getString(OrganizationDBConstants.ADDRESS_STREET_NUMBER);
        model.setAddressStreetNumber(addressStreetNumber);
        String addressRoute=rs.getString(OrganizationDBConstants.ADDRESS_ROUTE);
        model.setAddressRoute(addressRoute);
        String addressSubLocality=rs.getString(OrganizationDBConstants.ADDRESS_SUB_LOCALITY);
        model.setAddressSubLocality(addressSubLocality);
        String addressLocality=rs.getString(OrganizationDBConstants.ADDRESS_LOCALITY);
        model.setAddressLocality(addressLocality);
        String addressAdminAreaLevel1=rs.getString(OrganizationDBConstants.ADDRESS_ADMIN_AREA_LEVEL1);
        model.setAddressAdminAreaLevel1(addressAdminAreaLevel1);
        String addressAdminAreaLevel2=rs.getString(OrganizationDBConstants.ADDRESS_ADMIN_AREA_LEVEL2);
        model.setAddressAdminAreaLevel2(addressAdminAreaLevel2);
        String addressCountry=rs.getString(OrganizationDBConstants.ADDRESS_COUNTRY);
        model.setAddressCountry(addressCountry);
        String addressPostalCode=rs.getString(OrganizationDBConstants.ADDRESS_POSTAL_CODE);
        model.setAddressPostalCode(addressPostalCode);
        String addressFormattedAddress=rs.getString(OrganizationDBConstants.ADDRESS_FORMATTED_ADDRESS);
        model.setAddressFormattedAddress(addressFormattedAddress);
        String ownerName=rs.getString(OrganizationDBConstants.OWNER_NAME);
        model.setOwnerName(ownerName);
        return model;
    }
}
